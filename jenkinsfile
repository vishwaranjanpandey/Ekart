pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git-checkout') {
            steps {
                echo 'code-checkout'
                git branch: 'main', url: 'https://github.com/vishwaranjanpandey/Ekart.git'
            }
        }
        
        stage('code-compile') {
            steps {
                sh "mvn clean compile"
            }
        }
        stage('code-test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        stage('sonar-Analysis') {
            steps {
                 withSonarQubeEnv('sonar'){
                   sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=shoppingcart \
                   -Dsonar.java.binaries=. \
                   -Dsonar.projectKey=shoppingcart '''
                }
            }
        }
        stage('code-build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        stage('deploy to nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        stage('docker-build') {
            steps {
                sh "docker build -t shopping-cart:latest -f docker/Dockerfile ."
            }
        }
        stage('docker-push') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker tag shopping-cart:latest vishwaranjanpandey/shoppingcart:latest"
                    sh "docker push vishwaranjanpandey/shoppingcart:latest"
                    }
                }
            }
        }
        stage('Code-Deploy') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker run -d -p 8070:8070 vishwaranjanpandey/shoppingcart:latest"
                    }
                }
            }
        }
        stage('kubernetes-deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://34.42.19.221') {
                sh "kubectl apply -f deploymentservice.yml -n webapps"
                }
            }
        }
    }
}
